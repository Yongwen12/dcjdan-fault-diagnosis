import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader
from models.dcjdan_model import DCJDAN
from utils import create_dummy_dataset, l2_reg_loss, mmd_loss
from load_config import load_config

# Load config
config = load_config('config.yaml')

def train_dcjdan(source_data=None, target_data=None):
    device = 'cuda' if torch.cuda.is_available() else 'cpu'
    model = DCJDAN(num_classes=config['model']['num_classes']).to(device)

    optimizer = optim.Adam(model.parameters(), lr=config['training']['learning_rate'])
    ce_loss = nn.CrossEntropyLoss()

    # Prepare data loaders
    source_loader = DataLoader(
        source_data if source_data else create_dummy_dataset(3000, config['model']['num_classes']),
        batch_size=config['training']['batch_size'],
        shuffle=True
    )

    target_loader = DataLoader(
        target_data if target_data else create_dummy_dataset(1500, config['model']['num_classes']),
        batch_size=config['training']['batch_size'],
        shuffle=True
    )

    for epoch in range(config['training']['epochs']):
        model.train()
        for (x_s, y_s), (x_t, _) in zip(source_loader, target_loader):
            x_s, y_s = x_s.to(device), y_s.to(device)
            x_t = x_t.to(device)

            y_s_pred, y_t_pred, f_s, f_t = model(x_s, x_t)
            pseudo_labels_t = torch.argmax(y_t_pred.detach(), dim=1)

            loss_cls = ce_loss(y_s_pred, y_s)
            loss_mmd = mmd_loss(f_s, f_t, y_s, pseudo_labels_t)
            loss_reg = l2_reg_loss(model.source_net, model.target_net)

            loss = loss_cls + config['training']['mmd_weight'] * loss_mmd + config['training']['reg_weight'] * loss_reg

            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

        print(f"Epoch {epoch+1}/{config['training']['epochs']}, Loss: {loss.item():.4f}")

if __name__ == "__main__":
    train_dcjdan()
